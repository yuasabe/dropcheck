#!/usr/bin/env bash


# Variables

IPV4_CIDR_RE='^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$'
IPV6_CIDR_RE='^([0-9a-fA-F:]+:+)+[0-9a-fA-F]+/[0-9]{1,3}$'
IPV4_ADDR_RE='^([0-9]{1,3}\.){3}[0-9]{1,3}$'
IPV6_ADDR_RE='^([0-9a-fA-F:]+:+)+[0-9a-fA-F]+$'

ICMP_INTERVAL=0.1
ICMP_COUNT=3

GOOGLE_PUBLIC_DNS_V4='1.1.1.1'
GOOGLE_PUBLIC_DNS_V6='2001:4860:4860::8888'

WIDE_DOMAIN='www.wide.ad.jp'

GOOGLE_IPV4='https://ipv4.google.com/'
GOOGLE_IPV6='https://ipv6.google.com/'

TRACEROUTE_INTERVAL=0.1
TRACEROUTE_COUNT=100


# Misc functions

tag_fail() {
  printf "[\e[31;1mFAIL\e[m] "
  return 0
}

tag_pass() {
  printf "[\e[32;1mPASS\e[m] "
  return 0
}

tag_skip() {
  printf "[\e[33;1mSKIP\e[m] "
  return 0
}

tag_info() {
  printf "[\e[37;1mINFO\e[m] "
}

tag_test_status() {
  (($# != 1)) && return 1
  local test_status=$1
  (($test_status == 0)) && tag_pass || tag_fail
  return 0
}

printb() {
  (($# != 1)) && return 1
  local text="$1"
  printf "\e[1m${text}\e[m\n"
  return 0
}

# For Step 1
get_ipv4_cidr() {
  (($# != 1)) && return 1
  local interface="$1"
  local cidr="$(ip -4 addr show "$interface" 2> /dev/null | grep -m 1 inet | awk '{print $2}')"
  echo "$cidr" | grep -E "$IPV4_CIDR_RE" &> /dev/null || return 1
  echo "$cidr"
  return 0
}

get_ipv4_addr() {
  (($# != 1)) && return 1
  local interface="$1"
  local cidr
  cidr="$(get_ipv4_cidr "$interface")" || return 1
  local addr="$(echo "$cidr" | cut -d / -f 1)"
  echo "$addr" | grep -E "$IPV4_ADDR_RE" &> /dev/null || return 1
  echo "$addr"
  return 0
}

get_ipv4_gw_addr() {
  (($# != 1)) && return 1
  local interface="$1"
  local gw_addr="$(ip -4 route | grep -m 1 "default.*$interface" | awk '{print $3}')"
  echo "$gw_addr" | grep -E "$IPV4_ADDR_RE" &> /dev/null || return 1
  echo "$gw_addr"
  return 0
}

get_ipv6_cidr() {
  (($# != 1)) && return 1
  local interface="$1"
  local cidr="$(ip -6 addr show "$interface" 2> /dev/null | grep inet6 | grep -m 1 -v fe80 | awk '{print $2}')"
  echo "$cidr" | grep -E "$IPV6_CIDR_RE" &> /dev/null || return 1
  echo "$cidr"
  return 0
}

get_ipv6_addr() {
  (($# != 1)) && return 1
  local interface="$1"
  local cidr
  cidr="$(get_ipv6_cidr "$interface")" || return 1
  local addr="$(echo "$cidr" | cut -d / -f 1)"
  echo "$addr" | grep -E "$IPV6_ADDR_RE" &> /dev/null || return 1
  echo "$addr"
  return 0
}

get_ipv6_gw_addr() {
  (($# != 1)) && return 1
  local interface="$1"
  local gw_addr="$(ip -6 route | grep -m 1 "default.*$interface" | awk '{print $3}' | cut -d % -f 1)"
  echo "$gw_addr" | grep -E "$IPV6_ADDR_RE" &> /dev/null || return 1
  echo "$gw_addr"
  return 0
}

test_ipv4_addr_and_gw_addr() {
  (($# != 1)) && return 1
  local $interface="$1"
  local test_status=0
  local ipv4_cidr
  ipv4_cidr="$(get_ipv4_cidr "$interface")"
  test_status=$(($test_status || $?))
  local ipv4_gw_addr
  ipv4_gw_addr="$(get_ipv4_gw_addr "$interface")"
  test_status=$(($test_status || $?))
  if (($test_status != 0)); then
    echo 'Unable to retrieve IPv4 address'
  else
    echo "IPv4 address: $ipv4_cidr (default gateway: $ipv4_gw_addr)"
  fi
  return $test_status
}

test_ipv6_addr_and_gw_addr () {
  (($# != 1)) && return 1
  local $interface="$1"
  local test_status=0
  local ipv6_cidr
  ipv6_cidr="$(get_ipv6_cidr "$interface")"
  test_status=$(($test_status || $?))
  local ipv6_gw_addr
  ipv6_gw_addr="$(get_ipv6_gw_addr "$interface")"
  test_status=$(($test_status || $?))
  if (($test_status != 0)); then
    echo 'Unable to retrieve IPv6 address'
  else
    echo "IPv6 address: $ipv6_cidr (default gateway: $ipv6_gw_addr)"
  fi
  return $test_status
}

# For Step 2

test_ping_ipv4 () {
  (($# != 2)) && (($# != 3)) && return 1
  local host="$1"
  local interface="$2"
  if (($# == 3)); then
    local framesize=$3
    local datasize=$(($framesize - 28))
  fi
  local source_addr="$(get_ipv4_addr "$interface")"
  local result
  case $# in
    2 ) result="$(ping -c "$ICMP_COUNT" -i "$ICMP_INTERVAL" -S "$source_addr" "$host" 2> /dev/null)";;
    3 ) result="$(ping -c "$ICMP_COUNT" -i "$ICMP_INTERVAL" -S "$source_addr" -s "$datasize" -D "$host" 2> /dev/null)";;
    * ) return 1;;
  esac
  local test_status=$?
  case $# in
    2 ) echo -n "ping $host: ";;
    3 ) echo -n "ping $host ($framesize bytes): ";;
    * ) return 1;;
  esac
  if (($test_status != 0)); then
    echo "$result" | tail -n 1
  else
    echo "$result" | tail -n 2 | head -n 1
  fi
  return $test_status
}

test_ping_ipv6 () {
  (($# != 2)) && (($# != 3)) && return 1
  local host="$1"
  local interface="$2"
  if (($# == 3)); then
    local framesize=$3
    local datasize=$(($framesize - 48))
  fi
  local result
  case $# in
    2 ) result="$(ping6 -c "$ICMP_COUNT" -i "$ICMP_INTERVAL" -I "$interface" "$host" 2> /dev/null)";;
    3 ) result="$(ping6 -c "$ICMP_COUNT" -i "$ICMP_INTERVAL" -I "$interface" -s "$datasize" -D "$host" 2> /dev/null)";;
    * ) return 1;;
  esac
  local test_status=$?
  case $# in
    2 ) echo -n "ping $host: ";;
    3 ) echo -n "ping $host ($framesize bytes): ";;
    * ) return 1;;
  esac
  if (($test_status != 0)); then
    echo "$result" | tail -n 1
  else
    echo "$result" | tail -n 2 | head -n 1
  fi
  return $test_status
}

# For Step 3

test_dns_a () {
  (($# != 1)) && return 1
  local domain="$1"
  local result
  result="$(dig +short "$domain" A | grep -v -e '^$')"
  local test_status=$?
  if (($test_status != 0)); then
    echo "dig $domain A"
  else
    echo "$domain IN A $result"
  fi
  return $test_status
}

test_dns_aaaa () {
  (($# != 1)) && return 1
  local domain="$1"
  local result
  result="$(dig +short "$domain" AAAA | grep -v -e '^$')"
  local test_status=$?
  if (($test_status != 0)); then
    echo "dig $domain AAAA"
  else
    echo "$domain IN AAAA $result"
  fi
  return $test_status
}

test_http_get () {
  (($# != 1)) && return 1
  local url="$1"
  local result
  result="$(wget -p -T 3 -O .dropcheck "$url" 2>&1 | grep '200 OK')"
  local test_status=$?
  if (($test_status != 0)); then
    echo "GET $url"
  else
    echo "GET $url: $(echo "$result" | tail -n 1 | awk '{print $(NF-1),$NF}')"
  fi
  return $test_status
}

# For Step 5
download_file() {
  (($# != 1)) && return 1
  local url="$1"
  local result
  result="$(wget "$url" 2>&1 | grep '200 OK')"
  local test_status=$?
  if (($test_status != 0)); then
    echo "GET $url"
  else
    echo "GET $url: $(echo "$result" | tail -n 1 | awk '{print $(NF-1),$NF}')"
  fi
  return $test_status
}

main () {
  if (($# != 2 )); then
    echo "Usage: $0 interface step" >&2
    exit 1
  fi

  if (($EUID != 0)); then
    echo 'Please run as root'
    exit 1
  fi

  local interface="$1"
  local describe

  if (($# == 2)); then
    local step="$2"
  fi

  case $step in
    1 )
    #================================
    # STEP 1.
    #================================
    printb 'STEP 1. Retrieve IP addresses'

    describe="$(test_ipv4_addr_and_gw_addr "$interface")"
    local test_status_ipv4=$?
    tag_test_status $test_status_ipv4
    echo "$describe"

    describe="$(test_ipv6_addr_and_gw_addr "$interface")"
    local test_status_ipv6=$?
    tag_test_status $test_status_ipv6
    echo "$describe"

    if (($test_status_ipv4 != 0)) && (($test_status_ipv6 != 0)); then
      printb "\nUnable to retrieve IP address(es)."
      printb "Check the DHCP server or set IP address(es) by your self.\n"
      exit 1
    fi
    echo ;;

    # printf '\e[48;5;2m#############\n##  DONE!  ##\n#############\n'

    # printf '\e[0m';;

    2 )
      #================================
      # STEP 2.
      #================================
      printb 'STEP 2. Ping'

      # IPv4 Ping

      local ipv4_gw_addr="$(get_ipv4_gw_addr "$interface")"
      describe="$(test_ping_ipv4 "$ipv4_gw_addr" "$interface")"
      tag_test_status $?
      echo "$describe"

      # Ping IPv4 GW
      describe="$(test_ping_ipv4 "$ipv4_gw_addr" "$interface" 1472)"
      tag_test_status $?
      echo "$describe"

      # Ping 8.8.8.8
      describe="$(test_ping_ipv4 "$GOOGLE_PUBLIC_DNS_V4" "$interface")"
      tag_test_status $?
      echo "$describe"

      # Ping 8.8.8.8 long packet
      describe="$(test_ping_ipv4 "$GOOGLE_PUBLIC_DNS_V4" "$interface" 1472)"
      tag_test_status $?
      echo "$describe"

      # Ping 1.1.1.1
      describe="$(test_ping_ipv4 1.1.1.1 "$interface" 1472)"
      tag_test_status $?
      echo "$describe"

      # Ping 1.1.1.1 
      describe="$(test_ping_ipv4 1.1.1.1 "$interface")"
      tag_test_status $?
      echo "$describe"

      ## IPv6 Ping

      local ipv6_gw_addr="$(get_ipv6_gw_addr "$interface")"
      describe="$(test_ping_ipv6 "$ipv6_gw_addr" "$interface")"
      tag_test_status $?
      echo "$describe"

      describe="$(test_ping_ipv6 "$ipv6_gw_addr" "$interface" 1280)"
      tag_test_status $?
      echo "$describe"

      describe="$(test_ping_ipv6 "$GOOGLE_PUBLIC_DNS_V6" "$interface")"
      tag_test_status $?
      echo "$describe"

      describe="$(test_ping_ipv6 "$GOOGLE_PUBLIC_DNS_V6" "$interface" 1280)"
      tag_test_status $?
      echo "$describe"

      describe="$(test_ping_ipv6 2606:4700:4700::1111 "$interface" 1280)"
      tag_test_status $?
      echo "$describe"

      describe="$(test_ping_ipv6 2606:4700:4700::1111 "$interface" 1452)"
      tag_test_status $?
      echo "$describe"

      echo;;
    3 )
      #================================
      # STEP 3.
      #================================
      printb 'STEP 3. DNS and HTTP'

      describe="$(test_dns_a "$WIDE_DOMAIN")"
      tag_test_status $?
      echo "$describe"

      describe="$(test_dns_aaaa "$WIDE_DOMAIN")"
      tag_test_status $?
      echo "$describe"

      describe="$(test_http_get "$GOOGLE_IPV4")"
      tag_test_status $?
      echo "$describe"

      describe="$(test_http_get "$GOOGLE_IPV6")"
      tag_test_status $?
      echo "$describe"

      echo;;
    4 )
      #================================
      # STEP 4.
      #================================
      printb 'STEP 4. Check service chaining'

      tag_info
      echo 'mtr (IPv4)'
      mtr -4 -n -r -c $TRACEROUTE_COUNT -i $TRACEROUTE_INTERVAL $GOOGLE_PUBLIC_DNS_V4
      echo

      tag_info
      echo 'mtr (IPv6)'
      mtr -6 -n -r -c $TRACEROUTE_COUNT -i $TRACEROUTE_INTERVAL $GOOGLE_PUBLIC_DNS_V6
      echo;;

    5 )
      #================================
      # STEP 5. Download eicar.txt
      #================================
      printb 'STEP 5. Download eicar.com.txt'

      describe="$(download_file "$DOWNLOAD_FILE_PATH")"
      tag_test_status $?
      echo "$describe"

      echo;;
    *) return 1;;
  esac

  #================================
  # Cleanup
  #================================
  rm -rf .dropcheck
  printb 'Done!'
  echo

  
}

main $@
